generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Participant {
  id        Int                @id @default(autoincrement())
  name      String
  races     RaceParticipants[]
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

model Race {
  id           Int                @id @default(autoincrement())
  scheduledAt  DateTime?
  participants RaceParticipants[]
  tournament   Tournament         @relation(fields: [tournamentId], references: [id])
  tournamentId Int
  videos       VideoLink[]
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt

  @@index([tournamentId])
}

model RaceParticipants {
  id            Int         @id @default(autoincrement())
  race          Race        @relation(fields: [raceId], references: [id])
  participant   Participant @relation(fields: [participantId], references: [id])
  raceId        Int
  participantId Int
  role          String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([raceId])
  @@index([participantId])
}

model VideoLink {
  id       Int    @id @default(autoincrement())
  url      String
  provider String
  race     Race   @relation(fields: [raceId], references: [id])
  raceId   Int

  @@index([raceId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String?
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model Tournament {
  id        Int      @id @default(autoincrement())
  shortKey  String   @unique
  name      String   @unique
  active    Boolean
  races     Race[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([shortKey])
}
